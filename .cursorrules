# React Components Library - Cursor Rules

## 프로젝트 개요
이 프로젝트는 React + TypeScript로 개발된 컴포넌트 라이브러리입니다.

## 코딩 스타일 규칙

### 1. 언어 및 프레임워크
- React 18 이상 사용
- TypeScript 필수 사용
- SCSS/Sass 사용
- Vite 빌드 도구 사용

### 2. 파일 구조 규칙
- 컴포넌트는 `src/components/` 디렉토리에 위치
- 각 컴포넌트는 독립적인 폴더로 구성
- 컴포넌트 폴더 구조:
  ```
  ComponentName/
  ├── index.tsx (메인 컴포넌트)
  ├── ex.tsx (예제 페이지)
  ├── types.ts (타입 정의)
  ├── const.ts (상수, ENUM 정의)
  ├── style.scss (스타일)
  └── README.md (문서)
  ```

### 3. 네이밍 규칙
- 컴포넌트명: PascalCase (예: StyledButton, DatePicker)
- 파일명: camelCase (예: styledButton.tsx, datePicker.tsx)
- 변수/함수: camelCase
- 상수: camelCase
- CSS 클래스: kebab-case

### 4. TypeScript 규칙
- 모든 props에 타입 정의 필수 (interface 또는 type)
- 함수 반환 타입 명시
- any 타입 사용 금지
- 인터페이스/타입은 types.ts 파일에 정의

### 5. 스타일 규칙
- SCSS 사용
- BEM 방법론 권장
- CSS 모듈 또는 styled-components 사용 가능
- 반응형 디자인 고려

### 6. 컴포넌트 설계 원칙
- 단일 책임 원칙 준수
- 재사용 가능한 컴포넌트 설계
- props, 이벤트를 통한 상호작용
- 접근성 고려 (aria, role 등)

### 7. 문서화 규칙
- 각 컴포넌트에 README.md 작성
- 모든 사용 옵션 문서화
- 사용 예제 포함
- 한글로 작성

### 8. 테스트 및 품질
- ESLint 규칙 준수
- TypeScript 엄격 모드 사용
- 컴포넌트 예제 페이지 제공 (ex.tsx)
- 반응형 테스트

### 9. 특별 규칙
- 모든 응답은 한글로 작성
- @ 별칭 사용 권장 (src 디렉토리)
- Icon 컴포넌트 사용 시 @iconify/react 패키지 활용
- switch case 문에서 case: {} 형태의 작성을 금지한다.
- React 함수형 컴포넌트만 사용 (class 컴포넌트 금지)
- useState 등 React Hook 사용 시 네이밍 일관성 유지
- 불필요한 re-render 방지 (React.memo, useCallback 등 활용)
- import 시 type은 별도의 import로 일괄 분리한다. (ex. import type { ReactNode } from 'react';)

## AI 어시스턴트 지침
- 위 규칙들을 엄격히 준수하여 코드 생성
- 한글로 설명 및 주석 작성
- TypeScript 타입 안전성 보장
- 재사용 가능하고 확장 가능한 컴포넌트 설계
- 코드를 변경 할 경우 변경 된 내용만 출력 하고, 나머지 코드는 간략히 추려 출력한다.
- 예제 페이지 작성 시 다른 예제 페이지와 동일한 디자인을 유지한다.
- 블럭 문을 사용하는 제어문, 반복문, 함수 등을 선언 할때는 위, 아래로 빈 줄을 넣는다.
