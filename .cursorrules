# React Components Library - Cursor Rules

## 프로젝트 개요
이 프로젝트는 React + TypeScript로 개발된 컴포넌트 라이브러리입니다.
Vue.js에서 React로 마이그레이션된 프로젝트로, React 모범 사례를 준수합니다.

## 코딩 스타일 규칙

### 1. 언어 및 프레임워크
- React 18 이상 사용
- TypeScript 필수 사용
- SCSS/Sass 사용
- Vite 빌드 도구 사용
- @mui/icons-material 아이콘 라이브러리 사용

### 2. 파일 구조 규칙
- 컴포넌트는 `src/components/` 디렉토리에 위치
- 각 컴포넌트는 독립적인 폴더로 구성
- 컴포넌트 폴더 구조:
  ```
  ComponentName/
  ├── index.tsx         # 메인 컴포넌트
  ├── ex.tsx           # 예제 페이지
  ├── types.ts         # 타입 정의
  ├── const.ts         # 상수, ENUM 정의
  ├── hook.ts          # 커스텀 훅 (필요시)
  ├── style.scss       # 스타일
  └── README.md        # 문서
  ```

### 3. 네이밍 규칙
- 컴포넌트명: PascalCase (예: StyledButton, DatePicker)
- 컴포넌트 파일: index.tsx (폴더명으로 구분)
- 타입 파일: types.ts
- 훅 파일: hook.ts
- 유틸리티 파일: camelCase (예: helper.ts, utils.ts)
- 변수/함수: camelCase
- 상수 객체: camelCase (예: transitionCase, buttonColors)
- 전역 상수: UPPER_SNAKE_CASE (예: MAX_LENGTH, DEFAULT_TIMEOUT)
- CSS 클래스: kebab-case (예: button-primary, modal-content)
- React 컴포넌트 displayName: PascalCase로 명시적 설정

### 4. TypeScript 규칙
- 모든 props에 타입 정의 필수 (interface 또는 type)
- 함수 반환 타입 명시 권장
- any 타입 사용 금지 (unknown 또는 구체적 타입 사용)
- 인터페이스/타입은 types.ts 파일에 정의
- type import는 별도로 분리: `import type { Props } from './types';`
- 제네릭 타입 적극 활용

### 5. 스타일 규칙
- SCSS 사용
- CSS 클래스: kebab-case
- SCSS nesting 활용하여 계층 구조 표현
- 반응형 디자인 필수 고려 (@media 쿼리)
- CSS 변수 활용 (`$primary`, `$gray-100` 등)
- transition, animation은 CSS로 정의

### 6. 컴포넌트 설계 원칙
- React 함수형 컴포넌트만 사용 (class 컴포넌트 금지)
- 단일 책임 원칙 준수
- 재사용 가능한 컴포넌트 설계
- props, 이벤트를 통한 상호작용
- 접근성 필수 고려 (aria-*, role, tabIndex 등)
- forwardRef를 활용한 ref 전달 (필요시)
- useImperativeHandle로 부모 컴포넌트에 메서드 노출 (필요시)

### 7. React 성능 최적화 규칙
- 컴포넌트는 React.memo로 감싸기 (불필요한 리렌더링 방지)
- 콜백 함수는 useCallback으로 메모이제이션
- 계산된 값은 useMemo로 메모이제이션
- 컴포넌트 레벨 변수는 useRef로 관리 (메모리 누수 방지)
- 인라인 함수/객체 생성 지양 (JSX 내부)

#### useEffect/useCallback/useMemo 의존성 배열 규칙:
- setState 함수는 포함하지 않음 (안정적인 참조 보장)
- ref.current는 포함하지 않음
- props/state는 실제 사용되는 것만 포함
- validate, props 배열은 가능한 포함하지 않음 (매 렌더마다 재생성됨)
- 중복 의존성 제거 (예: state 객체와 state.property 동시 포함 금지)

### 8. Vue to React 마이그레이션 규칙
- Vue의 `<transition>` → React의 `CSSTransition` (react-transition-group)
- Vue transition 클래스 명명:
  * `-enter-from`, `-enter-active`, `-enter-to` (Vue)
  * `-enter`, `-enter-active`, `-exit`, `-exit-active` (React)
- Vue의 `provide/inject` → React의 Context API
- Vue computed → React useMemo
- Vue watch → React useEffect
- Vue의 양방향 바인딩 → React의 단방향 데이터 흐름

### 10. 문서화 규칙
- 각 컴포넌트에 README.md 작성
- 모든 사용 옵션 문서화 (props, 이벤트 등)
- 사용 예제 포함
- 한글로 작성

### 11. 테스트 및 품질
- ESLint 규칙 엄격히 준수
- TypeScript 엄격 모드 사용
- 컴포넌트 예제 페이지 제공 (ex.tsx)
- 반응형 테스트

### 12. 특별 규칙
- 모든 응답은 한글로 작성
- @ 별칭 사용 권장 (src 디렉토리 → @/)
- switch case 문에서 case: {} 형태의 작성을 금지한다.
- useState 등 React Hook 사용 시 네이밍 일관성 유지
- import 시 type은 별도의 import로 일괄 분리한다. (ex. `import type { ReactNode } from 'react';`)
- 라이브러리(패키지) 설치 시에는 pnpm 명령어를 사용한다.
- 라이브러리(패키지) 설치 시에는 이미 설치 된 내용이 있는지 반드시 확인 한다.
- 블럭 문을 사용하는 제어문, 반복문, 함수 등을 선언 할때는 위, 아래로 빈 줄을 넣는다.

## AI 어시스턴트 지침
- 위 규칙들을 엄격히 준수하여 코드 생성
- 한글로 설명 및 주석 작성
- TypeScript 타입 안전성 보장
- 재사용 가능하고 확장 가능한 컴포넌트 설계
- 코드를 변경 할 경우 변경 된 내용만 출력 하고, 나머지 코드는 간략히 추려 출력한다.
- 예제 페이지 작성 시 다른 예제 페이지와 동일한 디자인을 유지한다.
- 성능 최적화를 항상 고려하여 불필요한 리렌더링 방지
- Vue에서 React로 마이그레이션 시 React 모범 사례 적용
- transition/animation 사용 시 CSS와 React props 일치 확인
