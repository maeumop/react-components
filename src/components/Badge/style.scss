@charset "UTF-8";
/* @/components/Badge/_style.scss */

@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use '../scss/index' as *;

/// 컴포넌트 size 스타일 정의
/// @param {string} $size [default] - default|large
/// @output - .badge.size-#{modifier} { ... }
@mixin defineSizeStyle($size: default) {
  @if meta.type-of($size) != 'string' {
    @error "$modifier 는 문자열 값이 와야합니다.";
  }

  // 기본 값
  $_x: -0.4rem;
  $_y: -0.4rem;

  @if $size == large {
    $_x: -0.6rem;
    $_y: -0.6rem;
  }

  .badge.#{$size} {
    &.right {
      right: $_x;
      top: $_y;
    }

    &.left {
      left: $_x;
      top: $_y;
    }

    &.bottom-right {
      right: $_x;
      bottom: $_y;
    }

    &.bottom-left {
      left: $_x;
      bottom: $_y;
    }

    @content;
  }
}

$badge-colors: (
  primary: (
    bg: $primary,
    text: white,
  ),
  secondary: (
    bg: $secondary,
    text: white,
  ),
  success: (
    bg: $success,
    text: white,
  ),
  warning: (
    bg: $warning,
    text: white,
  ),
  error: (
    bg: $error,
    text: white,
  ),
  info: (
    bg: $info,
    text: white,
  ),
  light: (
    bg: $gray-100,
    text: $gray-800,
  ),
  dark: (
    bg: $gray-800,
    text: white,
  ),
);

@mixin badge-variant($bg, $text, $hover-delta: -10%, $disabled-delta: 20%) {
  background-color: $bg;
  color: $text;

  &:not(.disabled):hover {
    background-color: color.adjust($bg, $lightness: $hover-delta);
  }

  &.disabled {
    background-color: color.adjust($bg, $lightness: $disabled-delta);
    opacity: 0.6;
  }
}

/// 컴포넌트 color 스타일 정의
/// @output - .badge.#{color-name} { ... }
@mixin defineColorStyle {
  @each $name, $color in $component-colors {
    .badge.#{$name} {
      background-color: $color;
      color: white;

      &:not(&.disabled):hover {
        background-color: color.adjust($color, $lightness: -10%);
      }

      &.disabled {
        background-color: color.adjust($color, $lightness: 20%);
        opacity: 0.6;
      }
    }
  }
}

.badge-wrapper {
  position: relative;
  display: inline-block;

  .badge {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.2rem;
    height: 1.2rem;
    font-weight: 900;
    text-align: center;
    overflow: hidden;
    border-radius: 0.6rem;
    @include transition('all', 0.2s ease);

    @each $name, $val in $badge-colors {
      $bg: map.get($val, bg);
      $text: map.get($val, text);

      &.#{$name} {
        @include badge-variant($bg, $text);
      }
    }
  }

  @include defineSizeStyle() {
    font-size: 0.6rem;
    line-height: normal;
    border-radius: 0.8rem;
  }

  @include defineSizeStyle(large) {
    width: 1.8rem;
    height: 1.8rem;
    border-radius: 0.9rem;

    &.icon {
      font-size: 0;
      line-height: 0;
    }
  }
}
